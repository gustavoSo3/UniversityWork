# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: tucasita-app          # set this to your Amazon ECR repository name
  ECS_SERVICE: tucasita-app-service                 # set this to your Amazon ECS service name
  ECS_CLUSTER: tucasita-cluster                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ops/task-definition.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: tucasita-app           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition
  #ERROR CORREGIDO
  # Cambiamos la key de estar publica a ser un secreto en la github action.
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t tucasita-app .
          docker tag tucasita-app:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: List Public IP deployed to
        id: list-ip
        run: |
          echo "$(aws ec2 describe-network-interfaces --network-interface-ids $(aws ecs describe-tasks --cluster tucasita-cluster --tasks $(aws ecs list-tasks --cluster tucasita-cluster --service-name tucasita-app-service --query 'taskArns[0]' --output text) --output json | jq '.tasks[].attachments[].details[].value' | grep eni | tr -d '"') --output json | jq '.NetworkInterfaces[].Association.PublicIp' | tr -d '"'):3000"

      - name: Store IP
        id: store-ip
        run: |
          INSTANCE_URL="$(aws ec2 describe-network-interfaces --network-interface-ids $(aws ecs describe-tasks --cluster your-cluster --tasks $(aws ecs list-tasks --cluster your-cluster --service-name your-service --query 'taskArns[0]' --output text) --output json | jq '.tasks[].attachments[].details[].value' | grep eni | tr -d '"') --output json | jq '.NetworkInterfaces[].Association.PublicIp' | tr -d '"'):3000"
          echo $INSTANCE_URL
          echo "::set-output name=instance_url::$INSTANCE_URL"


